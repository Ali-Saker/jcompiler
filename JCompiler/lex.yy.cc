/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
static yyconst short int yy_accept[370] =
    {   0,
        0,    0,  101,  101,  106,  106,  121,  119,  109,  110,
      108,   57,  119,  111,   67,   78,  119,   94,   95,   65,
       59,   90,   62,   91,   87,  112,  112,   99,   98,   72,
       55,   70,   54,  119,  111,   92,   97,   73,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,   93,   75,   96,  101,  103,  102,
      106,  107,   58,    0,  117,    0,  111,   68,   80,   79,
        0,    0,   66,   61,   60,   64,   63,  115,  100,  105,
       88,  115,  112,  115,  115,    0,  116,  113,    0,  112,
       83,   71,   56,   69,   81,  118,  111,  111,   89,   74,

      111,  111,  111,  111,  111,  111,  111,  111,  111,   22,
      111,  111,  111,  111,  111,  111,  111,   29,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,   76,   77,  101,
      102,  102,  104,  106,  114,    0,  115,  115,    0,  112,
        0,  115,  112,   84,   82,   85,  118,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   17,  111,  111,  111,    4,
      111,  111,   30,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   33,

      111,  111,  111,    0,  115,    0,  116,    0,  115,  112,
       86,  111,  111,  111,  111,  111,   21,   27,  111,   40,
      111,  111,  111,  111,  111,   35,  111,  111,  111,  111,
       23,  111,  111,  111,  111,   18,  111,   31,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,    6,
      111,  111,   52,   39,  111,  111,    0,  115,  111,  111,
      111,  111,   15,   34,   46,    2,  111,  111,  111,  111,
       53,   47,   10,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   19,  111,  111,   38,  111,  111,   14,
      111,  111,   51,    9,  111,  111,  111,  111,  111,   28,

      111,  111,  111,   42,  111,  111,   24,  111,  111,  111,
        5,   13,   25,  111,   44,  111,   20,  111,  111,    0,
      111,    7,  111,   16,   41,    3,  111,  111,  111,   37,
       43,  111,  111,  111,  111,  111,    0,    1,    8,  111,
      111,  111,  111,   32,  111,  111,   45,    0,  111,  111,
       12,   49,  111,   26,    0,   36,   48,  111,    0,  111,
        0,   50,    0,    0,    0,    0,    0,   11,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   30,   30,   31,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   36,   34,   34,   34,   34,   37,   34,   34,
       38,   39,   40,   41,    8,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   51,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[70] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    4,    1,    1,
        5,    1,    1,    6,    1,    1,    1,    1,    1,    7,
        7,    7,    1,    1,    1,    1,    1,    1,    1,    7,
        7,    7,    7,    4,    8,    4,    4,    1,    1,    1,
        1,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   10,   11,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    1,    1,    1
    } ;

static yyconst short int yy_base[381] =
    {   0,
        0,    0,   67,   68,  581,  580,  582,  585,  585,  585,
      585,  555,   65,    0,  554,   63,  540,  585,  585,  552,
       59,  585,   58,   56,   69,   87,   77,  585,  585,   54,
      551,   60,  585,  112,   31,  536,  585,  549,  531,   36,
       74,   44,   49,   75,  517,   56,  516,   93,   94,  525,
      101,   57,  514,  520,  585,   95,  585,    0,  585,  139,
        0,  585,  585,  130,  585,  149,    0,  585,  585,  585,
      557,  163,  585,  585,  585,  585,  585,  193,  585,  585,
      585,  210,  151,  215,  585,  160,  585,  585,    0,    0,
      541,  585,  585,  585,  141,    0,  508,  506,  585,  585,

      505,  507,  516,  501,  119,  518,  517,  503,  510,  495,
      496,  494,  500,  497,  495,  492,  489,    0,  491,  124,
      492,  486,  482,  491,  499,  109,  499,  481,  484,  143,
      482,  488,  482,  136,  134,   76,  486,  585,  585,    0,
      179,  186,  585,    0,  585,  248,  251,  585,  259,    0,
      169,  268,  176,  585,  585,  509,    0,  484,  473,  472,
      478,  488,  483,  482,  483,  468,  466,  157,  482,  480,
      476,  475,  461,  477,  476,    0,  461,  166,  456,  469,
      466,  463,    0,  459,  459,  448,  449,  455,  446,  448,
      445,  454,  457,  442,  457,  441,  443,  443,  451,    0,

      451,  453,  441,  229,  271,  286,  585,  232,  289,  192,
      585,  438,  446,  433,  444,  437,    0,    0,  439,    0,
      428,  426,  435,  423,  430,    0,  427,  435,  427,  419,
        0,  432,  419,  434,  417,    0,  412,    0,  431,  430,
      425,  420,  411,  408,  417,  422,  407,  420,  414,    0,
      399,  402,    0,    0,  400,  413,  265,  304,  410,  403,
      414,  413,    0,    0,    0,    0,  399,  400,  406,  406,
        0,  397,    0,  395,  388,  391,  391,  381,  368,  349,
      361,  353,  340,    0,  350,  327,    0,  337,  318,  316,
      300,  298,    0,    0,  329,  302,  290,  283,  283,    0,

      283,  276,  294,    0,  295,  296,    0,  287,  286,  271,
        0,    0,    0,  283,    0,  273,    0,  282,  274,  267,
      261,    0,  273,    0,    0,    0,  262,  269,  270,    0,
        0,  266,  248,  245,  240,  248,  217,    0,    0,  217,
      219,  221,  221,    0,  214,  199,    0,  198,  185,  187,
        0,    0,  162,    0,  202,    0,    0,  166,  151,  158,
      139,    0,  137,  102,   78,   59,   38,  585,  585,  351,
      362,  373,  381,  392,  403,  414,  425,  430,  431,  436
    } ;

static yyconst short int yy_def[381] =
    {   0,
      369,    1,  370,  370,  371,  371,  369,  369,  369,  369,
      369,  369,  372,  373,  369,  369,  374,  369,  369,  369,
      369,  369,  369,  369,  369,  369,   26,  369,  369,  369,
      369,  369,  369,  369,  373,  369,  369,  369,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  369,  369,  369,  375,  369,  376,
      377,  369,  369,  372,  369,  369,  373,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,   27,  369,  369,  369,  369,  369,  378,   27,
      369,  369,  369,  369,  369,  379,  373,  373,  369,  369,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  369,  369,  375,
      376,  376,  369,  377,  369,  369,  369,  369,  369,   83,
      369,  369,  380,  369,  369,  369,  379,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  369,  369,  369,  369,  369,  369,  380,
      369,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  369,  369,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  369,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  369,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  369,  373,  373,
      373,  373,  373,  373,  369,  373,  373,  373,  369,  373,
      369,  373,  369,  369,  369,  369,  369,  369,    0,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369
    } ;

static yyconst short int yy_nxt[655] =
    {   0,
        8,    9,   10,    8,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   27,   28,   29,   30,   31,   32,   33,   34,   14,
       14,   14,   14,   14,   14,   35,   14,   36,    8,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   14,   46,
       14,   14,   47,   14,   48,   14,   49,   50,   51,   52,
       14,   53,   54,   14,   14,   14,   55,   56,   57,   59,
       59,   65,   69,   74,   76,   78,   78,   78,   91,   92,
       60,   60,   79,   77,   75,   94,   95,   80,   70,  109,
       97,  102,  368,  103,   81,   98,   90,   90,   90,  110,

      104,  111,  118,   66,   82,  134,   83,   83,   84,  119,
      120,  367,  112,  369,  135,  105,  113,   85,   86,   87,
      138,   88,  106,   89,  114,  201,  107,  115,  202,  108,
      116,   85,   86,   87,  122,  125,   65,  366,  123,   88,
      369,   96,   96,   96,   96,   96,   96,   96,   96,  129,
       89,  126,  142,  124,  127,   64,  365,  143,  186,   64,
      130,  131,  139,  132,  187,  133,  155,  156,   66,   71,
      150,  150,   84,   71,  151,  198,  151,  164,  165,  152,
      152,  152,  179,  180,  191,  196,  364,   64,  152,  152,
      152,   64,  369,  197,  199,   64,  363,  369,  200,  142,

      192,   71,  362,   64,  143,   71,   64,  361,   64,   71,
       88,  360,   78,   78,   78,  222,  223,   71,  232,  359,
       71,  233,   71,   85,  146,   87,   88,  358,   88,  147,
      147,  147,   82,  357,   84,   84,   84,   85,  146,   87,
      148,  149,   87,  356,   88,   85,   86,   87,  205,  205,
      205,  209,  209,  209,  148,  149,   87,  355,  354,   85,
       86,   87,  204,  353,  204,  352,  351,  205,  205,  205,
      147,  147,  147,  208,  350,  208,  349,  348,  209,  209,
      209,   85,  206,  207,  258,  258,  258,  152,  152,  152,
      205,  205,  205,  347,  346,   85,  206,  207,   85,  345,

      257,   85,  257,   87,  344,  258,  258,  258,  209,  209,
      209,  343,   85,  342,  341,   85,  340,   87,  339,  148,
      338,   87,  337,  258,  258,  258,  336,  335,  334,  333,
      332,  331,  330,  148,   85,   87,  207,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,   85,  318,
      207,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   64,  317,  316,   64,   64,   64,   64,
       64,   64,   64,   64,   67,  315,  314,   67,   67,   67,
       67,   67,   71,  313,  312,   71,  311,   71,   71,   71,

       71,   71,   71,  140,  310,  140,  140,  140,  309,  140,
      140,  140,  140,  140,  141,  308,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  144,  307,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  153,  306,  153,  157,
      157,  157,  210,  210,  210,  305,  210,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  256,  255,  254,  253,  252,  251,  250,

      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  231,  230,  229,  228,
      227,  226,  225,  224,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  203,  195,  194,  193,  190,
      189,  188,  185,  184,  183,  182,  181,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      163,  162,  161,  160,  159,  158,  154,  145,  137,  136,
      128,  121,  117,  101,  100,   99,   93,   73,   72,   68,
       63,  369,   62,   62,    7,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369
    } ;

static yyconst short int yy_chk[655] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,   13,   16,   21,   23,   24,   24,   24,   30,   30,
        3,    4,   25,   23,   21,   32,   32,   25,   16,   42,
       35,   40,  367,   40,   25,   35,   27,   27,   27,   42,

       40,   43,   46,   13,   26,   52,   26,   26,   26,   46,
       46,  366,   43,   27,   52,   41,   44,   26,   26,   26,
       56,   26,   41,   26,   44,  136,   41,   44,  136,   41,
       44,   26,   26,   26,   48,   49,   64,  365,   48,   26,
       27,   34,   34,   34,   34,   34,   34,   34,   34,   51,
       26,   49,   60,   48,   49,   66,  364,   60,  126,   66,
       51,   51,   56,   51,  126,   51,   95,   95,   64,   72,
       83,   83,   83,   72,   86,  135,   86,  105,  105,   86,
       86,   86,  120,  120,  130,  134,  363,   66,  151,  151,
      151,   66,  141,  134,  135,   66,  361,  141,  135,  142,

      130,   72,  360,   66,  142,   72,   66,  359,   66,   72,
      153,  358,   78,   78,   78,  168,  168,   72,  178,  355,
       72,  178,   72,   78,   78,   78,  210,  353,  153,   82,
       82,   82,   84,  350,   84,   84,   84,   78,   78,   78,
       82,   82,   82,  349,  210,   84,   84,   84,  204,  204,
      204,  208,  208,  208,   82,   82,   82,  348,  346,   84,
       84,   84,  146,  345,  146,  343,  342,  146,  146,  146,
      147,  147,  147,  149,  341,  149,  340,  337,  149,  149,
      149,  147,  147,  147,  257,  257,  257,  152,  152,  152,
      205,  205,  205,  336,  335,  147,  147,  147,  152,  334,

      206,  205,  206,  205,  333,  206,  206,  206,  209,  209,
      209,  332,  152,  329,  328,  205,  327,  205,  323,  209,
      321,  209,  320,  258,  258,  258,  319,  318,  316,  314,
      310,  309,  308,  209,  258,  209,  258,  306,  305,  303,
      302,  301,  299,  298,  297,  296,  295,  292,  258,  291,
      258,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  372,  290,  289,  372,  372,  372,  372,
      372,  372,  372,  372,  373,  288,  286,  373,  373,  373,
      373,  373,  374,  285,  283,  374,  282,  374,  374,  374,

      374,  374,  374,  375,  281,  375,  375,  375,  280,  375,
      375,  375,  375,  375,  376,  279,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  278,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  378,  277,  378,  379,
      379,  379,  380,  380,  380,  276,  380,  275,  274,  272,
      270,  269,  268,  267,  262,  261,  260,  259,  256,  255,
      252,  251,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  237,  235,  234,  233,  232,  230,  229,
      228,  227,  225,  224,  223,  222,  221,  219,  216,  215,
      214,  213,  212,  203,  202,  201,  199,  198,  197,  196,

      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  182,  181,  180,  179,  177,  175,  174,  173,
      172,  171,  170,  169,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  156,  137,  133,  132,  131,  129,
      128,  127,  125,  124,  123,  122,  121,  119,  117,  116,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  106,
      104,  103,  102,  101,   98,   97,   91,   71,   54,   53,
       50,   47,   45,   39,   38,   36,   31,   20,   17,   15,
       12,    7,    6,    5,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
#define INITIAL 0
#line 2 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
		#include "yacc.hpp"
		#include "Scanner.h"
		int lineNo = 1;
		int colNo = 1;
#define MULTI_LINE_COMMENT 1

#define SINGLE_LINE_COMMENT 2

#line 601 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 49 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"




#line 733 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 370 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 585 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ABSTRACT;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CONST;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return FINALLY;}	
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return INT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return PUBLIC;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return THIS;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return BOOLEAN;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CONTINUE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return STRING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return FLOAT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return PRINT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 64 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return INTERFACE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 65 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return RETURN;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 66 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return THROW;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return BREAK;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return DEFAULT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 69 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return FOR;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 70 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return LONG;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 71 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return SHORT;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 72 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return THROWS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 73 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return BYTE;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 74 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return DO;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return GOTO;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 76 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return NATIVE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return STATIC;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return TRANSIENT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CASE;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return DOUBLE;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return IF;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return NEW;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return JNULL;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return STRICTFP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return TRY;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CATCH;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ELSE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return IMPLEMENTS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return PACKAGE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return SUPER;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return VOID;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CHAR;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return EXTENDS;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return IMPORT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return PRIVATE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return SWITCH;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return VOLATILE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CLASS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return FINAL;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return INSTANCEOF;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return PROTECTED;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return SYNCHRONIZED;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return WHILE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return BOOLLIT;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return BOOLLIT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_EQ;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_NE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_ADD;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_INC;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_SUB;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 122 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_DEC;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_MUL;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_MOD;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_GE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_LE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_XOR;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_OR;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_LOR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_AND;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_LAND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_SHR;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_SHR;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_SHL;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_SHL;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_SHRR;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_SHRR;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return * yytext;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ASS_DIV;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return OP_DIM;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = ','; */return * yytext;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = '.'; */return * yytext;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = '['; */return * yytext;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = '{'; */return * yytext;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = '('; */return * yytext;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = ')'; */return * yytext;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = '}';*/ return * yytext;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = ']';*/ return * yytext;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = ';'; */return * yytext;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{/*yylval = ';'; */return * yytext;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
BEGIN(MULTI_LINE_COMMENT);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{colNo += strlen(yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{colNo += strlen(yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 166 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{++lineNo; colNo=1;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{colNo+=2; BEGIN(INITIAL);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 170 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
BEGIN(SINGLE_LINE_COMMENT);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"

	YY_BREAK
case 107:
YY_RULE_SETUP
#line 172 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{++lineNo; colNo=1; BEGIN(INITIAL);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{colNo += 1;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 177 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{colNo += 4;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 178 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{++lineNo; colNo = 1;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 181 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return IDENTIFIER;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 186 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return INT_LITERAL;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 187 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return LONG_LITERAL;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 188 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return CHAR_LITERAL;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 189 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return DOUBLE_LITERAL;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 190 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return FLOAT_LITERAL;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 191 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return STRING_LITERAL;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ANNOTATION;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
{return ERROR;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 196 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"
ECHO;
	YY_BREAK
#line 1416 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MULTI_LINE_COMMENT):
case YY_STATE_EOF(SINGLE_LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 370 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 370 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 369);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 196 "E:\\Courses(Damascus University)\\Forth Year\\Compiler Construction\\Compiler(Java compiler implemented in c++)\\Compiler\\JCompiler\\JCompiler\\scanning.l"

int give_Me_Token_Col(){
	return colNo;
}
int give_Me_Token_Line(){
	return lineNo;
}
void Update_Col(int x){
	colNo += x;
}
